// Generated by CoffeeScript 2.0.2
(function() {
  var Promise, express, installCheck, os, setupErrorHandler, setupMiddlewares, setupRouters, setupSession, wrapPromise;

  express = require('express');

  Promise = require('bluebird');

  os = require('os');

  wrapPromise = function(args) {
    var handler;
    if (args.length > 0) {
      handler = args[args.length - 1];
      args[args.length - 1] = function(req, res) {
        return Promise.resolve().then(function() {
          return handler(req, res);
        }).then(function(result) {
          return res.sendResult(result || {});
        }).catch(function(error) {
          return res.sendError(error);
        });
      };
    }
    return args;
  };

  express.Router.getPromise = function(...args) {
    return this.get.apply(this, wrapPromise(args));
  };

  express.Router.postPromise = function(...args) {
    return this.post.apply(this, wrapPromise(args));
  };

  express.Router.putPromise = function(...args) {
    return this.put.apply(this, wrapPromise(args));
  };

  express.Router.deletePromise = function(...args) {
    return this.delete.apply(this, wrapPromise(args));
  };

  setupMiddlewares = function(app, config) {
    var bodyParser;
    bodyParser = require('body-parser');
    app.use(function(req, res, next) {
      if (req.headers && req.headers['content-type']) {
        req.headers['content-type'] = req.headers['content-type'].replace(/euc-kr/ig, 'utf-8');
      }
      return next();
    });
    app.use(require('compression')());
    app.use(bodyParser.json({
      limit: config.max_body_size || '10mb'
    }));
    app.use(bodyParser.urlencoded({
      limit: config.max_body_size || '10mb',
      extended: true
    }));
    app.use(require('cookie-parser')());
  };

  setupSession = function(app, config) {
    var RedisStore, redis, redis_client, session, sessionStore;
    session = require('express-session');
    redis = require('redis');
    RedisStore = require('connect-redis')(session);
    redis_client = redis.createClient(config.redis_port || 6379, config.redis_host || '127.0.0.1');
    sessionStore = new RedisStore({
      client: redis_client,
      ttl: config.session_ttl,
      pass: config.redis_password
    });
    sessionStore.on('disconnect', function() {
      console.log("RedisStore for express is disconnected. Exit the process...");
      setTimeout(function() {
        process.exit(0);
      }, 1000);
    });
    app.use(session({
      store: sessionStore,
      secret: config.session_secret,
      cookie: {
        maxAge: config.session_ttl * 1000,
        domain: config.session_domain
      },
      saveUninitialized: config.session_save_uninitialized || false,
      resave: true // session expire를 초기로 돌리기 위해서 매번 다시 저장한다
    }));
  };

  setupRouters = function(app, config) {
    var ctor, path, ref, router;
    ref = config.routers;
    for (path in ref) {
      ctor = ref[path];
      router = express.Router();
      if (!path) {
        installCheck(router, config);
      }
      ctor(router, app);
      if (path) {
        app.use(path, router);
      } else {
        app.use(router);
      }
    }
  };

  installCheck = function(router, config) {
    var worker_num;
    worker_num = process.env.WORKER_NUM;
    return router.get('/api/check', function(req, res) {
      var data;
      req.skip_logging = true;
      data = {
        memory: process.memoryUsage(),
        uptime: process.uptime(),
        dir: config.project_root,
        worker_num: worker_num,
        hostname: os.hostname(),
        nodejs: process.version
      };
      //if data.memory.rss > 1.5 * 1000 * 1000 * 1000
      //  process.kill process.pid, 'SIGHUP'
      if (req.session == null) {
        data.session = false;
        res.status(400);
      }
      res.type('application/json; charset=utf-8');
      return res.json(data);
    });
  };

  setupErrorHandler = function(app, config) {
    app.use(function(err, req, res, next) {
      var code;
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      res.error = err;
      code = err.status || res.statusCode;
      if (code < 400) {
        code = 500;
      }
      res.type('application/json; charset=utf-8').status(code).json({
        error: err.message
      });
    });
  };

  module.exports = function(config) {
    var app;
    app = express();
    app.set('trust proxy', true);
    if (config.log4js_config) {
      app.use(require('./logger')(config));
    }
    setupMiddlewares(app, config);
    setupSession(app, config);
    setupRouters(app, config);
    setupErrorHandler(app, config);
    app.response._errors = config.errors || {};
    require('./response').install(app.response);
    return app;
  };

}).call(this);
